#!/bin/bash

NINJA="ninja-build"

# Parse command line arguments
ninja_args="$@"

# Main section
origdir=`pwd`

# Interpret signals correctly
trap "cd $origdir" SIGINT SIGTERM

# Try to find the ninja file somewhere in
# the file hierarchy
ninjaf='build.ninja'
ninjadir=""
if   test -e                          "$ninjaf"; then s=0; ninjadir="./"
elif test -e                       "../$ninjaf"; then s=1; ninjadir="../"
elif test -e                    "../../$ninjaf"; then s=2; ninjadir="../../"
elif test -e                 "../../../$ninjaf"; then s=3; ninjadir="../../../"
elif test -e              "../../../../$ninjaf"; then s=4; ninjadir="../../../../"
elif test -e           "../../../../../$ninjaf"; then s=5; ninjadir="../../../../../"
elif test -e        "../../../../../../$ninjaf"; then s=6; ninjadir="../../../../../../"
elif test -e     "../../../../../../../$ninjaf"; then s=7; ninjadir="../../../../../../../"
elif test -e  "../../../../../../../../$ninjaf"; then s=8; ninjadir="../../../../../../../../"
else
  # echo "Ninja build files not found, trying to use make..."
  make $ninja_args
  exit $?
fi

# Calculate the relative path of current directory
# in respect to ninja build root
curdir="."
if [ "$s" -ne "0" ]; then
  curdir=`echo $origdir | rev | cut -f -$s -d / | rev`
fi

cd $ninjadir
if [ "$s" -eq "0" ]; then
  $NINJA $ninja_args
  rc=$?

else
  # Build all targets in current directory
  targets=""
  which parallel &> /dev/null
  if [[ "$?" == "0" ]]; then
    targets=`LANG="C" grep "^build $curdir" $ninjaf | parallel --no-notice --pipe "cut -f 1 -d: | sed 's/^build //'"`
  else
    targets=`LANG="C" grep "^build $curdir" $ninjaf | cut -f 1 -d: | sed 's/^build //'`
  fi
  if [ "$targets" == "" ]; then
      echo "No targets founds"
      exit 1
  fi
  $NINJA $ninja_args $targets
  rc=$?
fi
cd $origdir

# return code is that of ninja
# with this, you can use it as "ninjac && ctest"
exit $rc
